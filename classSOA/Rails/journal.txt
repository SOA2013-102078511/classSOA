10/12

#啟動伺服器
Rails使用了一套叫做Bundler的工具可以幫助我們檢查及安裝這個Rails應用程式所有依存的套件，請輸入：
$ bundle install
可以只輸入bundle就是bundle install了。 

每次有修改Gemfile這個檔案，都需要重新執行bundle


#出現 ActiveModel::MassAssignmentSecurity::Error 錯誤？
Rails 3.2.8 之後的 3.2.X 版本預設將 config/application.rb 的 config.active_record.whitelist_attributes 設定改成 true，讓大量賦值(Mass assignment)功能失效(詳見安全性一章)，造成範例中如 l = Location.new( :event => e ) 出現 ActiveModel::MassAssignmentSecurity::Error: Can't mass-assign protected attributes: event 的錯誤。
解決方式有 1. 修改 config/application.rb 的 config.active_record.whitelist_attributes 設定為 false 2. 或是分開賦值 l=Location.new; l.event = e
Rails 4 之後又沒這個問題了，該 config.active_record.whitelist_attributes 設定被移除，預設改回允許大量賦值(Mass assignment)，所以本書範例就不做修正了。

10/13
#Rake routes   
這是用來觀察，你的 rails 專案中，有哪些 routes 可以用。
如果設定 routes.rb 一直搞不定，就下這個指令來觀察吧！
擴充Template Handler
Rails預設只有內建ERb和Builder這兩套樣板引擎，但要擴充非常容易。例如在Rails社群中，也很流行用HAML這套樣板引擎來取代ERb。HAML是一套利用縮排技術簡化HTML撰寫的格式

#rake db:seed 執行 db/seeds.rb 載入種子資料
種子資料 Seed
種子資料Seed的意思是，有一些資料是應用程式跑起來必要基本資料，而這些資料的產生我們會放在db/seeds.rb這個檔案。例如，讓我們打開來，加入一些基本的Category資料：
·	輸入rake db:seed就會執行這個檔案了。通常執行的時機是第一次建立好資料庫和跑完Migration之後。

#Migrations（資料庫遷移）
Migrations（資料庫遷移）可以讓你用 Ruby 程式來修改資料庫結構。相較於直接進資料庫系統使用 SQL 修改結構(例如使用 phpMyAdmin 工具來修改)，使用 Migrations 可以讓我們有記錄地進行資料庫修改，每次變更就是一筆 Migration 記錄。在沒有 Migration 之前，如果你手動修改了資料庫，那麼你就必須通知其他開發者也進行一樣的修改步驟。另外，在正式佈署的伺服器上，你也必須追蹤並執行同樣的變更才行。而這些步驟如果沒有記錄下來，就很容易出錯。
Migrations 會自動追蹤哪些變更已經執行過了、那些還沒有，你只要新增 Migration 檔案，然後執行 rake db:migrate 就搞定了。它會自己搞清楚該跑哪些 migrations，如此所有的開發者和正式佈署的伺服器上，就可以輕易的同步最新的資料庫結構。另外一個優點是： Migration 是獨立於資料庫系統的，所以你不需要煩惱各種資料庫系統的語法差異，像是不同型態之類的。當然，如果要針對某個特定資料庫系統撰寫專屬功能的話，還是可以透過直接寫 SQL 的方式。
